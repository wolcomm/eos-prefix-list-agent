name: "CI/CD"
on:
  - push
  - pull_request
env:
  DEFAULT_PYTHON: 3.7
  EARTHLY_VERSION: 0.6.2
jobs:
  earthly:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: install earthly
        run: |
          sudo wget "https://github.com/earthly/earthly/releases/download/v${EARTHLY_VERSION}/earthly-linux-amd64" \
            -O /usr/local/bin/earthly && \
          sudo chmod +x /usr/local/bin/earthly
      - name: bootstrap earthly
        run: |
          /usr/local/bin/earthly bootstrap
      - name: login to azure acr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.AZURE_ACR_URI }}
          username: ${{ env.AZURE_ACR_TOKEN_NAME }}
          password: ${{ secrets.AZURE_ACR_TOKEN }}
        env:
          AZURE_ACR_URI: "workonline.azurecr.io"
          AZURE_ACR_TOKEN_NAME: "gh-actions-eos-prefix-list-agent"
      - name: login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build
        run: earthly -P --ci --output --push +all
  safety:
    runs-on: ubuntu-latest
    env:
      TOX_JOB: safety
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: run ${{ env.TOX_JOB }} job
        run: tox
  lint:
    needs: [safety]
    runs-on: ubuntu-latest
    env:
      TOX_JOB: lint
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: run ${{ env.TOX_JOB }} job
        run: tox
  typecheck:
    needs: [safety]
    runs-on: ubuntu-latest
    env:
      TOX_JOB: typecheck
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: run ${{ env.TOX_JOB }} job
        run: tox
  test:
    needs: [safety]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ceos:
          - "4.26.3M"
          - "4.27.0F"
    env:
      TOX_JOB: test
      CEOS_VERSION: ${{ matrix.ceos }}
      AZURE_ACR_URI: "workonline.azurecr.io"
      AZURE_ACR_TOKEN_NAME: "gh-actions-eos-prefix-list-agent"
      AZURE_ACR_TOKEN: ${{ secrets.AZURE_ACR_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: login to azure acr
        run: |
          echo -n "${AZURE_ACR_TOKEN}" | docker login \
              --username "${AZURE_ACR_TOKEN_NAME}" \
              --password-stdin "${AZURE_ACR_URI}"
      - name: run ${{ env.TOX_JOB }} job
        run: tox
      - name: upload coverage report artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-ceos-${{ matrix.ceos }}
          path: coverage.xml
  coverage-report:
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ceos:
          - "4.26.3M"
          - "4.27.0F"
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: download coverage report artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-ceos-${{ matrix.ceos }}
      - name: upload coverage report
        uses: codecov/codecov-action@v1
        env:
          CEOS_VERSION: ${{ matrix.ceos }}
        with:
          files: coverage.xml
          env_vars: CEOS_VERSION
  # build-docs:
  #   needs: [safety]
  #   runs-on: ubuntu-latest
  #   env:
  #     TOX_JOB: docs
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: setup python ${{ env.DEFAULT_PYTHON }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ env.DEFAULT_PYTHON }}
  #     - name: install ${{ env.TOX_JOB }} job runner
  #       run: python -m pip install -r packaging/requirements-tox.txt
  #     - name: run ${{ env.TOX_JOB }} job
  #       run: tox -e $TOX_JOB
  #     - name: upload built docs artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: docs
  #         path: build/docs/html/
  build-pkg:
    needs: [safety]
    runs-on: ubuntu-latest
    env:
      TOX_JOB: build
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: run ${{ env.TOX_JOB }} job
        run: tox
      - name: upload rpm artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rpm
          path: bdist/**/*.rpm
      - name: upload swix artifacts
        uses: actions/upload-artifact@v2
        with:
          name: swix
          path: bdist/**/*.swix
  test-pkg:
    needs: [build-pkg]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ceos:
          - "4.26.3M"
          - "4.27.0F"
    env:
      TOX_JOB: testpkg
      CEOS_VERSION: ${{ matrix.ceos }}
      AZURE_ACR_URI: "workonline.azurecr.io"
      AZURE_ACR_TOKEN_NAME: "gh-actions-eos-prefix-list-agent"
      AZURE_ACR_TOKEN: ${{ secrets.AZURE_ACR_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: install ${{ env.TOX_JOB }} job runner
        run: python -m pip install -r packaging/requirements-tox.txt
      - name: login to azure acr
        run: |
          echo -n "${AZURE_ACR_TOKEN}" | docker login \
              --username "${AZURE_ACR_TOKEN_NAME}" \
              --password-stdin "${AZURE_ACR_URI}"
      - name: download swix artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: swix
          path: swix
      - name: run ${{ env.TOX_JOB }} job
        run: tox -- ${{ steps.download.outputs.download-path }}
  # publish-docs:
  #   if: ${{ github.event_name == 'push' }}
  #   needs:
  #     - build-docs
  #     - lint
  #     - typecheck
  #     - test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: download built docs artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: docs
  #         path: build/docs/html/
  #     - name: deploy to github-pages
  #       uses: JamesIves/github-pages-deploy-action@4.1.1
  #       with:
  #         branch: gh-pages
  #         folder: build/docs/html
  #         clean-exclude: /index.html
  # publish-dist:
  #   if: ${{ github.event_name == 'push' }}
  #   needs:
  #     - build-dist
  #     - lint
  #     - typecheck
  #     - test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: setup python ${{ env.DEFAULT_PYTHON }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ env.DEFAULT_PYTHON }}
  #     - name: download sdist artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: sdist
  #         path: dist/
  #     - name: download wheel artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: wheel
  #         path: dist/
  #     - name: publish built artifacts to test.pypi.org
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/
  #         skip_existing: true
  #     - name: publish built artifacts to pypi.org
  #       if: ${{ startsWith(github.ref, 'refs/tag') }}
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}
